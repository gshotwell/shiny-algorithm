---
title: "How does Shiny work?"
format: 
  revealjs:
    incremental: true
filters: 
    - shinylive
editor:
  render-on-save: true
---
```{python}
# | echo: false
from helpers import include_shiny_folder


def include_qmd(path):
    with open(path, "r") as file:
        print(file.read())


```

## Searching for a framework
- Data science has a last-mile problem
- You often have to wait for "real web developers"
    - Expensive!
    - Takes forever!
    - Often incorrect!
- Why can't we do it ourselves?

## Example: Feature API
- Managed feature store metadata
- Developed by Data Science team
- Valuable to the whole company
- Needed a front-end

## What was missing?
- We needed a framework which could grow
    - Streamlit's looked fragile
    - Dash seemed awkward
    - We didn't have any JavaScript developers

## What is Shiny?
- Framework for building fast, extensible applications
- Pure python implementation released last year
- Easy enough rapid prototyping
- Everthing you need to build a product

## Example: Model training dashboard



## How did Shiny do that?

```{.python}
    @render.plot
    def score_dist():
        df_filtered = df[df["account"] == input.account()]
        return dist_plot(df_filtered)

    @render.plot
    def metric():
        df_filtered = df[df["account"] == input.account()]
        if input.metric() == "ROC Curve":
            return plot_auc_curve(df_filtered, "is_electronics", "training_score")
        else:
            return plot_precision_recall_curve(
                df_filtered, "is_electronics", "training_score"
            )
```

- We told Shiny _what_ to do
- We didn't tell Shiny _when_ to do it

## How do other frameworks work?

- Streamlit: re-render everything everywhere all the time
- Dash/Panel/Gradio: Define callback functions

## Event driven programming

- You have to do it
- Easy to get wrong
- Hard to tell when you've gotten it wrong


##
![](imgs/slack-activity.png)

## What's a better way?

![Generic DAG](imgs/generic-dag.png)

## Shiny's Strategy

- Infer the relationships between components 
- Build a computation graph
- Use graph to minimally reexecute your application

## Sounds fishy
![](imgs/larry-suspicion.gif)

## Does that really work?

- For this to work, the inference has to be 100% reliable
- You need to understand and trust this algorithm

## How would you do this?

```{.python}
    @render.plot
    def score_dist():
        df_filtered = df[df["account"] == input.account()]
        return dist_plot(df_filtered)

    @render.plot
    def metric():
        df_filtered = df[df["account"] == input.account()]
        if input.metric() == "ROC Curve":
            return plot_auc_curve(df_filtered, "is_electronics", "training_score")
        else:
            return plot_precision_recall_curve(
                df_filtered, "is_electronics", "training_score"
            )
```

## Static code analysis

```{python}
# | echo: false
# | output: asis
include_shiny_folder(
    "apps/todo-list",
    components="viewer",
    viewer_height=500,
)
```

## Runtime tracing
- Watch what components ask for
- Keep track of those relationships
- Use relationships to trigger rendering 


## Outputs and recipes

```{.python code-line-numbers="5"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Outputs and recipes

```{.python code-line-numbers="10"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Outputs and recipes

```{.python code-line-numbers="11"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Recipes and inputs

```{.python code-line-numbers="4"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Reactive graph
```{mermaid}
%%| fig-width: 2
flowchart TD
  S[Input] --> Sc((Output))
```

## Drawing our application graph

```{python}
# | output: "asis"
include_qmd("_basic-reactivity.qmd")
```

## Graphs can change
```{python}
# | echo: false
# | output: asis
include_shiny_folder(
    "apps/flip-flop",
    components="viewer",
    viewer_height=500,
)
```

```{python}
# | output: "asis"
include_qmd("_flip-flop-app.qmd")
```


## Reactivity scales

- Every Shiny app uses this pattern
- Works for dynamic UIs
- Lazy and efficient

# Reactive calculations

## Saving and reusing calculated values

- So far we've been working with shallow reactive graphs
- Inputs are directly consumed by rendering functions
- `@reactive.Calc` creates calculations whose results are used by other functions
- This adds depth to the reactive graph

## Example: Model monitoring


## What do I want?
1) Query the database for a sample between those dates
2) Filter the result of that query by account id in memory
3) Send that data to the plotting functions
4) Cache the results of 1 and 2
5) Invalidate the cache only when upstream inputs change
6) Do no thinking or work

## What do I want?

::: nonincremental
1) Query the database for a sample between those dates
2) Filter the result of that query by account id in memory
3) Send that data to the graphs
4) **Cache the results of 1 and 2**
5) **Invalidate the cache only when upstream inputs change**
6) **Do no thinking or work**
:::

## Reactive calculations
- Defined with the `@reactive.Calc` decorator
- Caches its value, so it's cheap to call repeatedly
- Adds a node to the reactive graph
  - Discards cached value when upstream nodes invalidate
  - Notifies downstream nodes when it invalidates


## Reactive Calculation to the rescue
```{.python}
   @reactive.Calc
    def sampled_data():
        start_date, end_date = input.dates()
        start_date = pd.to_datetime(start_date)
        end_date = pd.to_datetime(end_date)
        return query_db(start_date, end_date, input.sample_size())

    @reactive.Calc()
    def filtered_data():
        filtered = sampled_data()
        filtered = filtered.loc[filtered["account"] == input.account()]
        return filtered
```

## Reactive Calculation to the rescue
```{.python code-line-numbers="2,10"}
   @reactive.Calc
    def sampled_data():
        start_date, end_date = input.dates()
        start_date = pd.to_datetime(start_date)
        end_date = pd.to_datetime(end_date)
        return query_db(start_date, end_date, input.sample_size())

    @reactive.Calc()
    def filtered_data():
        filtered = sampled_data()
        filtered = filtered.loc[filtered["account"] == input.account()]
        return filtered
```

```{python}
# | output: asis

include_qmd("_reactive-calc.qmd")
```


## Events and Effects

- Reactivity is a great default 
- Not everything fits this pattern
    - You want to specify when something happens
    - You want to batch inputs 
    - You want to trigger a side effect
- Event-driven programming ain't all bad

## Example: data annotation

## What do we want
- Annotation shouldn't react automatically
- We want to manually specify what happens _when_ the button is clicked

## Reactive effects
```{.python}
@reactive.Effect
@reactive.event(input.is_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="electronics")

@reactive.Effect
@reactive.event(input.not_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="not_electronics")
```

## Reactive effect

```{.python code-line-numbers="1,3,6,8"}
@reactive.Effect
@reactive.event(input.is_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="electronics")

@reactive.Effect
@reactive.event(input.not_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="not_electronics")
```

## Reactive event

```{.python code-line-numbers="2,7"}
@reactive.Effect
@reactive.event(input.is_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="electronics")

@reactive.Effect
@reactive.event(input.not_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="not_electronics")
```

## Reactive event

```{.python code-line-numbers="4,9"}
@reactive.Effect
@reactive.event(input.is_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="electronics")

@reactive.Effect
@reactive.event(input.not_electronics)
def _():
    update_annotation(df(), id=selected_row()["id"], annotation="not_electronics")
```


## Things to note

- `@reactive.event` can be paired with rendering functions and `reactive.Calc`
- Adds event-driven chocolate chips into the reactive cookie
- If you find yourself using it everywhere there's likely a bigger problem

## Side effects vs values

- `@reactive.Effect` is for side effects:
    - Updating a database
    - Deploying a model
    - Writing a CSV
- `@reactive.Calc` is for values
    - Running a calculation
    - Fetching data from a database
    - Filtering a data frame

## Other patterns

- Use `reactive.isolate` to prevent cycles
- Include data in reactive graph with `reactive.poll`
- Include time with `reactive.invalidate_later`
- Store things in variables with `reactive.Value`


## Summary

- Shiny is performant and extensible
- It's algorithm is elegant, but not magic
- App behaviour should be driven by users, not your framework
- Pick a framework which can solve tomorrow's problems

## Thank you!

```{python}
import qrcode

qr = qrcode.QRCode(
    version=3, box_size=20, border=10, error_correction=qrcode.constants.ERROR_CORRECT_H
)
data = "https://gshotwell.github.io/shiny-algorithm/#/title-slide"
qr.add_data(data)
qr.make(fit=True)
img = qr.make_image(fill_color="black", back_color="white")
img.save("qr_code.png")
```

### [https://gshotwell.github.io/shiny-algorithm/](https://posit-dev.github.io/shiny-python-workshop-2023/)
![](qr_code.png)

[Shiny for Python](https://shiny.posit.co/py/)